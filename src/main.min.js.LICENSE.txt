/*
  connect is a facade over connectAdvanced. It turns its args into a compatible
  selectorFactory, which has the signature:

    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps
  
  connect passes its args to connectAdvanced as options, which will in turn pass them to
  selectorFactory each time a Connect component instance is instantiated or hot reloaded.

  selectorFactory returns a final props selector from its mapStateToProps,
  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,
  mergePropsFactories, and pure args.

  The resulting final props selector is called by the Connect component instance whenever
  it receives new props or store state.
 */

/*
  selectorFactory is a func that is responsible for returning the selector function used to
  compute new props from state, props, and dispatch. For example:
      export default connectAdvanced((dispatch, options) => (state, props) => ({
      thing: state.things[props.thingId],
      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),
    }))(YourComponent)
    Access to dispatch is provided to the factory so selectorFactories can bind actionCreators
  outside of their selector as an optimization. Options passed to connectAdvanced are passed to
  the selectorFactory, along with displayName and WrappedComponent, as the second argument.
    Note that selectorFactory is responsible for all caching/memoization of inbound and outbound
  props. Do not use connectAdvanced directly without memoizing results between calls to your
  selector, otherwise the Connect component will re-render on every state or props change.
*/

/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

/*   */

/* ! */

/* " */

/* # */

/* % */

/* & */

/* ' */

/* ( */

/* ) */

/* * */

/* + */

/* , */

/* - */

/* . */

/* / */

/* 0 */

/* 1 */

/* 10 */

/* 11 */

/* 12 */

/* 13 */

/* 14 */

/* 15 */

/* 16 */

/* 17 */

/* 18 */

/* 19 */

/* 2 */

/* 20 */

/* 21 */

/* 22 */

/* 23 */

/* 24 */

/* 25 */

/* 26 */

/* 27 */

/* 28 */

/* 29 */

/* 3 */

/* 30 */

/* 31 */

/* 32 */

/* 33 */

/* 34 */

/* 35 */

/* 36 */

/* 37 */

/* 38 */

/* 39 */

/* 4 */

/* 40 */

/* 41 */

/* 42 */

/* 43 */

/* 44 */

/* 45 */

/* 46 */

/* 47 */

/* 48 */

/* 49 */

/* 5 */

/* 50 */

/* 51 */

/* 52 */

/* 53 */

/* 54 */

/* 55 */

/* 6 */

/* 7 */

/* 8 */

/* 9 */

/* : */

/* ; */

/* < */

/* = */

/* > */

/* ? */

/* @ */

/* A */

/* WEBPACK VAR INJECTION */

/* Z */

/* [ */

/* \ */

/* \f */

/* \n */

/* \r */

/* \t */

/* \u00A0 */

/* \uFEFF */

/* ] */

/* ^ */

/* _ */

/* ` */

/* a */

/* eslint-disable import/no-unresolved */

/* eslint-disable no-unused-vars */

/* eslint-disable no-unused-vars, prefer-destructuring */

/* eslint-disable-next-line @typescript-eslint/no-this-alias */

/* eslint-disable-next-line no-new */

/* eslint-enable no-unused-vars */

/* eslint-enable no-unused-vars, prefer-destructuring */

/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */

/* global window */

/* globals self */

/* harmony default export */

/* harmony export (binding) */

/* harmony import */

/* z */

/* { */

/* | */

/* } */

/*!
 * fill-range <https://github.com/jonschlinkert/fill-range>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Licensed under the MIT License.
 */

/*!
 * is-extglob <https://github.com/jonschlinkert/is-extglob>
 *
 * Copyright (c) 2014-2016, Jon Schlinkert.
 * Licensed under the MIT License.
 */

/*!
 * is-glob <https://github.com/jonschlinkert/is-glob>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

/*!
 * is-number <https://github.com/jonschlinkert/is-number>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Released under the MIT License.
 */

/*!
 * normalize-path <https://github.com/jonschlinkert/normalize-path>
 *
 * Copyright (c) 2014-2018, Jon Schlinkert.
 * Released under the MIT License.
 */

/*!
 * to-regex-range <https://github.com/micromatch/to-regex-range>
 *
 * Copyright (c) 2015-present, Jon Schlinkert.
 * Released under the MIT License.
 */

/*#__PURE__*/

/**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */

/**
     * @type {'add'|'addDir'|'unlink'|'unlinkDir'}
     */

/**
     * Braces
     */

/**
     * Comma: ','
     */

/**
     * Commas
     */

/**
     * Dot: '.'
     */

/**
     * Dots
     */

/**
     * Double quotes
     */

/**
     * Escaped characters
     */

/**
     * Escaped chars
     */

/**
     * Exclamation
     */

/**
     * If we're inside a quoted string, continue
     * until we reach the closing double quote.
     */

/**
     * If we're inside a regex character class, continue
     * until we reach the closing bracket.
     */

/**
     * Invalid chars
     */

/**
     * Left curly brace: '{'
     */

/**
     * Left square bracket: '['
     */

/**
     * Parentheses
     */

/**
     * Pipes
     */

/**
     * Plain text
     */

/**
     * Plus
     */

/**
     * Question marks
     */

/**
     * Quotes: '|"|`
     */

/**
     * Right curly brace: '}'
     */

/**
     * Right square bracket (literal): ']'
     */

/**
     * Slashes
     */

/**
     * Square brackets
     */

/**
     * Stars
     */

/**
     * Text
     */

/**
   * @param {Path} dir
   * @param {Function} removeWatcher
   */

/**
   * @returns {Array<String>}
   */

/**
   * @type {Array<String>}
   */

/**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */

/**
   * Create EXTGLOB_CHARS
   */

/**
   * Create GLOB_CHARS
   */

/**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */

/**
   * Fast paths
   */

/**
   * Generate profiling statistics for the HTML5Backend.
   */

/**
   * Helpers
   */

/**
   * If the global context was used to store the DND context
   * then where theres no more references to it we should
   * clean it up to avoid memory leaks
   */

/**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */

/**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */

/**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */

/**
   * This makes a shallow copy of currentListeners so we can use
   * nextListeners as a temporary list while dispatching.
   *
   * This prevents any bugs around consumers calling
   * subscribe/unsubscribe in the middle of a dispatch.
   */

/**
   * Tokenize input until we reach end-of-string
   */

/**
   * Tokenizing helpers
   */

/**
 *
 * @param monitor The monitor to collect state from
 * @param collect The collecting function
 * @param onUpdate A method to invoke when updates occur
 */

/**
 *
 * @param {Path} newPath
 * @param {fs.Stats} stats
 */

/**
 *
 * @param {Path} path
 * @param {Function} closer
 */

/**
 * @mixin
 */

/**
 * @param {AnymatchPattern} matcher
 * @param {object} options
 * @returns {AnymatchFn}
 */

/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */

/**
 * @param {import("../index").FSWatcher} fsW
 */

/**
 * @param {import('../index').FSWatcher} fsw
 */

/**
 * @param {string} str
 * @param {Object} opts
 * @param {boolean} [opts.flipBackslashes=true]
 */

/**
 * @type {Map<String,FsWatchContainer>}
 */

/**
 * @typedef {Object} FsWatchContainer
 * @property {Set} listeners
 * @property {Set} errHandlers
 * @property {Set} rawEmitters
 * @property {fs.FSWatcher=} watcher
 * @property {Boolean=} watcherUnusable
 */

/**
 * @typedef {Object} ReaddirpArguments
 * @property {Function=} fileFilter
 * @property {Function=} directoryFilter
 * @property {String=} type
 * @property {Number=} depth
 * @property {String=} root
 * @property {Boolean=} lstat
 * @property {Boolean=} bigint
 */

/**
 * @typedef {String} Path
 */

/**
 * A React component that provides the React-DnD context
 */

/**
 * A hook to access the redux store's state. This hook takes a selector function
 * as an argument. The selector is called with the store state.
 *
 * This hook takes an optional equality comparison function as the second parameter
 * that allows you to customize the way the selected state is compared to determine
 * whether the component needs to be re-rendered.
 *
 * @param {Function} selector the selector function
 * @param {Function=} equalityFn the function that will be used to determine equality
 *
 * @returns {any} the selected state
 *
 * @example
 *
 * import React from 'react'
 * import { useSelector } from 'react-redux'
 *
 * export const CounterComponent = () => {
 *   const counter = useSelector(state => state.counter)
 *   return <div>{counter}</div>
 * }
 */

/**
 * A hook to access the value of the `ReactReduxContext`. This is a low-level
 * hook that you should usually not need to call directly.
 *
 * @returns {any} the value of the `ReactReduxContext`
 *
 * @example
 *
 * import React from 'react'
 * import { useReduxContext } from 'react-redux'
 *
 * export const CounterComponent = ({ value }) => {
 *   const { store } = useReduxContext()
 *   return <div>{store.getState()}</div>
 * }
 */

/**
 * A hook to retrieve the DragDropManager from Context
 */

/**
 * Adds paths to be watched on an existing FSWatcher instance
 * @param {Path|Array<Path>} paths_
 * @param {String=} _origAdd private; for handling non-existent paths to be watched
 * @param {Boolean=} _internal private; indicates a non-user add
 * @returns {FSWatcher} for chaining
 */

/**
 * Awaits write operation to finish.
 * Polls a newly created file for size variations. When files size does not change for 'threshold' milliseconds calls callback.
 * @param {Path} path being acted upon
 * @param {Number} threshold Time in milliseconds a file size must be fixed before acknowledging write OP is finished
 * @param {EventName} event
 * @param {Function} awfEmit Callback to be called when ready for event to be emitted.
 */

/**
 * Cache
 */

/**
 * Calls a task as soon as possible after returning, in its own event, with priority
 * over other events like animation, reflow, and repaint. An error thrown from an
 * event will not interrupt, nor even substantially slow down the processing of
 * other events, but will be rather postponed to a lower priority event.
 * @param {{call}} task A callable object, typically a function that takes no
 * arguments.
 */

/**
 * Check for read permissions.
 * Based on this answer on SO: https://stackoverflow.com/a/11781404/1358405
 * @param {fs.Stats} stats - object, result of fs_stat
 * @returns {Boolean} indicates whether the file can be read
*/

/**
 * Close watchers and remove all listeners from watched paths.
 * @returns {Promise<void>}.
*/

/**
 * Close watchers or start ignoring events from specified paths.
 * @param {Path|Array<Path>} paths_ - string or array of strings, file/directory paths and/or globs
 * @returns {FSWatcher} for chaining
*/

/**
 * Closes all watchers for a path
 * @param {Path} path
 */

/**
 * Closes only file-specific watchers
 * @param {Path} path
 */

/**
 * Common handler for errors
 * @param {Error} error
 * @returns {Error|Boolean} The error if defined, otherwise the value of the FSWatcher instance's `closed` flag
 */

/**
 * Compiles a brace pattern into a regex-compatible, optimized string.
 * This method is called by the main [braces](#braces) function by default.
 *
 * ```js
 * const braces = require('braces');
 * console.log(braces.compile('a/{b,c}/d'));
 * //=> ['a/(b|c)/d']
 * ```
 * @param {String} `input` Brace pattern or AST.
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

/**
 * Constants
 */

/**
 * Convert a range to a regex pattern
 * @param {Number} `start`
 * @param {Number} `stop`
 * @return {String}
 */

/**
 * Coordinate addition
 * @param a The first coordinate
 * @param b The second coordinate
 */

/**
 * Coordinate subtraction
 * @param a The first coordinate
 * @param b The second coordinate
 */

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

/**
 * Create a regular expression from a parsed glob pattern.
 *
 * ```js
 * const picomatch = require('picomatch');
 * const state = picomatch.parse('*.js');
 * // picomatch.compileRe(state[, options]);
 *
 * console.log(picomatch.compileRe(state));
 * //=> /^(?:(?!\.)(?=.)[^/]*?\.js)$/
 * ```
 * @param {String} `state` The object returned from the `.parse` method.
 * @param {Object} `options`
 * @return {RegExp} Returns a regex created from the given pattern.
 * @api public
 */

/**
 * Create a regular expression from the given regex source string.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.toRegex(source[, options]);
 *
 * const { output } = picomatch.parse('*.js');
 * console.log(picomatch.toRegex(output));
 * //=> /^(?:(?!\.)(?=.)[^/]*?\.js)$/
 * ```
 * @param {String} `source` Regular expression source string.
 * @param {Object} `options`
 * @return {RegExp}
 * @api public
 */

/**
 * Create the React Context
 */

/**
 * Creates a Redux store that holds the state tree.
 * The only way to change the data in the store is to call `dispatch()` on it.
 *
 * There should only be a single store in your app. To specify how different
 * parts of the state tree respond to actions, you may combine several reducers
 * into a single reducer function by using `combineReducers`.
 *
 * @param {Function} reducer A function that returns the next state tree, given
 * the current state tree and the action to handle.
 *
 * @param {any} [preloadedState] The initial state. You may optionally specify it
 * to hydrate the state from the server in universal apps, or to restore a
 * previously serialized user session.
 * If you use `combineReducers` to produce the root reducer function, this must be
 * an object with the same shape as `combineReducers` keys.
 *
 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
 * to enhance the store with third-party capabilities such as middleware,
 * time travel, persistence, etc. The only store enhancer that ships with Redux
 * is `applyMiddleware()`.
 *
 * @returns {Store} A Redux store that lets you read the state, dispatch actions
 * and subscribe to changes.
 */

/**
 * Creates a braces string from an AST, or an AST node.
 *
 * ```js
 * const braces = require('braces');
 * let ast = braces.parse('foo/{a,b}/bar');
 * console.log(stringify(ast.nodes[2])); //=> '{a,b}'
 * ```
 * @param {String} `input` Brace pattern or AST.
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

/**
 * Creates a matcher function from one or more glob patterns. The
 * returned function takes a string to match as its first argument,
 * and returns true if the string is a match. The returned matcher
 * function also takes a boolean as the second argument that, when true,
 * returns an object with additional information.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch(glob[, options]);
 *
 * const isMatch = picomatch('*.!(*a)');
 * console.log(isMatch('a.a')); //=> false
 * console.log(isMatch('a.b')); //=> true
 * ```
 * @name picomatch
 * @param {String|Array} `globs` One or more glob patterns.
 * @param {Object=} `options`
 * @return {Function=} Returns a matcher function.
 * @api public
 */

/**
 * Creates the context object we're providing
 * @param backend
 * @param context
 */

/**
 * Determine if two cartesian coordinate offsets are equal
 * @param offsetA
 * @param offsetB
 */

/**
 * Determines if the given handler IDs are dirty or not.
 *
 * @param dirtyIds The set of dirty handler ids
 * @param handlerIds The set of handler ids to check
 */

/**
 * Determines if two arrays of items are equal
 * @param a The first array of items
 * @param b The second array of items
 */

/**
 * Determines the x,y offset between the client offset and the initial client offset
 *
 * @param state The offset state to compute from
 */

/**
 * Determines whether user has asked to ignore this path.
 * @param {Path} path filepath or dir
 * @param {fs.Stats=} stats result of fs.stat
 * @returns {Boolean}
 */

/**
 * Directory entry.
 * @property {Path} path
 * @property {Set<Path>} items
 */

/**
 * Escape the given node with '\\' before node.value
 */

/**
 * Expands a brace pattern into an array. This method is called by the
 * main [braces](#braces) function when `options.expand` is true. Before
 * using this method it's recommended that you read the [performance notes](#performance))
 * and advantages of using [.compile](#compile) instead.
 *
 * ```js
 * const braces = require('braces');
 * console.log(braces.expand('a/{b,c}/d'));
 * //=> ['a/b/d', 'a/c/d'];
 * ```
 * @param {String} `pattern` Brace pattern
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

/**
 * Expose "braces"
 */

/**
 * Expose "picomatch"
 */

/**
 * Expose `toRegexRange`
 */

/**
 * Expose list of watched paths
 * @returns {Object} for chaining
*/

/**
 * Fast paths for creating regular expressions for common glob patterns.
 * This can significantly speed up processing and has very little downside
 * impact when none of the fast paths match.
 */

/**
 * Find a node of the given type
 */

/**
 * Flatten an array
 */

/**
 * Handle added file, directory, or glob pattern.
 * Delegates call to _handleFile / _handleDir after checks.
 * @param {String} path to file or ir
 * @param {Boolean} initialAdd was the file added at watch instantiation?
 * @param {Object} priorWh depth relative to user-supplied path
 * @param {Number} depth Child path actually targeted for watch
 * @param {String=} target Child path actually targeted for watch
 * @returns {Promise}
 */

/**
 * Handle added path with fsevents
 * @param {String} path file/dir path or glob pattern
 * @param {Function|Boolean=} transform converts working path to what the user expects
 * @param {Boolean=} forceAdd ensure add is emitted
 * @param {Number=} priorDepth Level of subdirectories already traversed.
 * @returns {Promise<void>}
 */

/**
 * Handle symlinks encountered during directory scan
 * @param {String} linkPath path to symlink
 * @param {String} fullPath absolute path to the symlink
 * @param {Function} transform pre-existing path transformer
 * @param {Number} curDepth level of subdirectories traversed to where symlink is
 * @returns {Promise<void>}
 */

/**
 * Handle symlinks encountered during directory scan
 * @param {String} watchPath  - file/dir path to be watched with fsevents
 * @param {String} realPath   - real path (in case of symlinks)
 * @param {Function} transform  - path transformer
 * @param {Function} globFilter - path filter in case a glob pattern was provided
 * @returns {Function} closer for the watcher instance
*/

/**
 * Handle symlinks encountered while reading a dir.
 * @param {Object} entry returned by readdirp
 * @param {String} directory path of dir being read
 * @param {String} path of this item
 * @param {String} item basename of this item
 * @returns {Promise<Boolean>} true if no more processing is needed for this entry.
 */

/**
 * Handles emitting unlink events for
 * files and directories, and via recursion, for
 * files and directories within directories that are unlinked
 * @param {String} directory within which the following item is located
 * @param {String} item      base path of item/directory
 * @returns {void}
*/

/**
 * Helper for passing fs_watch event data to a collection of listeners
 * @param {Path} fullPath absolute path bound to fs_watch instance
 * @param {String} type listener type
 * @param {*=} val1 arguments to be passed to listeners
 * @param {*=} val2
 * @param {*=} val3
 */

/**
 * Helper utility for throttling
 * @param {ThrottleType} actionType type being throttled
 * @param {Path} path being acted upon
 * @param {Number} timeout duration of time to suppress duplicate actions
 * @returns {Object|false} tracking object or false if action should be suppressed
 */

/**
 * Instantiates the fs_watch interface
 * @param {String} path to be watched
 * @param {Object} options to be passed to fs_watch
 * @param {Function} listener main event handler
 * @param {Function} errHandler emits info about errors
 * @param {Function} emitRaw emits raw event data
 * @returns {fs.FSWatcher} new fsevents instance
 */

/**
 * Instantiates the fs_watch interface or binds listeners
 * to an existing one covering the same file system entry
 * @param {String} path
 * @param {String} fullPath absolute path
 * @param {Object} options to be passed to fs_watch
 * @param {Object} handlers container for event listener functions
 */

/**
 * Instantiates the fsevents interface or binds listeners to an existing one covering
 * the same file tree.
 * @param {Path} path           - to be watched
 * @param {Path} realPath       - real path for symlinks
 * @param {Function} listener   - called when fsevents emits events
 * @param {Function} rawEmitter - passes data to listeners of the 'raw' event
 * @returns {Function} closer
 */

/**
 * Main function which ends up calling readdirRec and reads all files and directories in given root recursively.
 * @param {String} root Root directory
 * @param {ReaddirpArguments=} options Options to specify root (start directory), filters and recursion depth
 */

/**
 * Match the basename of a filepath.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.matchBase(input, glob[, options]);
 * console.log(picomatch.matchBase('foo/bar.js', '*.js'); // true
 * ```
 * @param {String} `input` String to test.
 * @param {RegExp|String} `glob` Glob pattern or regex created by [.makeRe](#makeRe).
 * @return {Boolean}
 * @api public
 */

/**
 * Normalize and emit events.
 * Calling _emit DOES NOT MEAN emit() would be called!
 * @param {EventName} event Type of event
 * @param {Path} path File or directory path
 * @param {*=} val1 arguments to be passed with event
 * @param {*=} val2
 * @param {*=} val3
 * @returns the error if defined, otherwise the value of the FSWatcher instance's `closed` flag
 */

/**
 * Parse a glob pattern to create the source string for a regular
 * expression.
 *
 * ```js
 * const picomatch = require('picomatch');
 * const result = picomatch.parse(pattern[, options]);
 * ```
 * @param {String} `pattern`
 * @param {Object} `options`
 * @return {Object} Returns an object with useful properties and output to be used as a regex source string.
 * @api public
 */

/**
 * Parse the given `str` with the given `options`.
 *
 * ```js
 * // braces.parse(pattern, [, options]);
 * const ast = braces.parse('a/{b,c}/d');
 * console.log(ast);
 * ```
 * @param {String} pattern Brace pattern to parse
 * @param {Object} options
 * @return {Object} Returns an AST
 * @api public
 */

/**
 * Picomatch constants.
 * @return {Object}
 */

/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */

/**
 * Processes a brace pattern and returns either an expanded array
 * (if `options.expand` is true), a highly optimized regex-compatible string.
 * This method is called by the main [braces](#braces) function.
 *
 * ```js
 * const braces = require('braces');
 * console.log(braces.create('user-{200..300}/project-{a,b,c}-{1..10}'))
 * //=> 'user-(20[0-9]|2[1-9][0-9]|300)/project-(a|b|c)-([1-9]|10)'
 * ```
 * @param {String} `pattern` Brace pattern
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

/**
 * Provides a set of common helpers and properties relating to symlink and glob handling.
 * @param {Path} path file, directory, or glob pattern being watched
 * @param {Number=} depth at any depth > 0, this isn't a glob
 * @returns {WatchHelper} object containing helpers for this path
 */

/**
 * Provides directory tracking objects
 * @param {String} directory path of the directory
 * @returns {DirEntry} the directory's tracking object
 */

/**
 * Read directory to add / remove files from `@watched` list and re-read it on change.
 * @param {String} dir fs path
 * @param {fs.Stats} stats
 * @param {Boolean} initialAdd
 * @param {Number} depth relative to user-supplied path
 * @param {String} target child path targeted for watch
 * @param {Object} wh Common watch helpers for this path
 * @param {String} realpath
 * @returns {Promise<Function>} closer for the watcher instance.
 */

/**
 * Reduce an array of text nodes.
 */

/**
 * Returns the cartesian distance of the drag source component's position, based on its position
 * at the time when the current drag operation has started, and the movement difference.
 *
 * Returns null if no item is being dragged.
 *
 * @param state The offset state to compute from
 */

/**
 * Returns true if **any** of the given glob `patterns` match the specified `string`.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.isMatch(string, patterns[, options]);
 *
 * console.log(picomatch.isMatch('a.a', ['b.*', '*.a'])); //=> true
 * console.log(picomatch.isMatch('a.a', 'b.*')); //=> false
 * ```
 * @param {String|Array} str The string to test.
 * @param {String|Array} patterns One or more glob patterns to use for matching.
 * @param {Object} [options] See available [options](#options).
 * @return {Boolean} Returns true if any patterns match `str`
 * @api public
 */

/**
 * Returns true if a brace node is invalid.
 */

/**
 * Returns true if a node is an open or close node
 */

/**
 * Returns true if the given brace node should be enclosed in literal braces
 */

/**
 * Scan a glob pattern to separate the pattern into segments.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.scan(input[, options]);
 *
 * const result = picomatch.scan('!./foo/*.js');
 * console.log(result);
 * { prefix: '!./',
 *   input: '!./foo/*.js',
 *   start: 3,
 *   base: 'foo',
 *   glob: '*.js',
 *   isBrace: false,
 *   isBracket: false,
 *   isGlob: true,
 *   isExtglob: false,
 *   isGlobstar: false,
 *   negated: true }
 * ```
 * @param {String} `input` Glob pattern to scan.
 * @param {Object} `options`
 * @return {Object} Returns an object with
 * @api public
 */

/**
 * Test `input` with the given `regex`. This is used by the main
 * `picomatch()` function to test the input string.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.test(input, regex[, options]);
 *
 * console.log(picomatch.test('foo/bar', /^(?:([^/]*?)\/([^/]*?))$/));
 * // { isMatch: true, match: [ 'foo/', 'foo', 'bar' ], output: 'foo/bar' }
 * ```
 * @param {String} `input` String to test.
 * @param {RegExp} `regex`
 * @return {Object} Returns an object with matching info.
 * @api public
 */

/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */

/**
 * Turns an object whose values are action creators, into an object with the
 * same keys, but with every function wrapped into a `dispatch` call so they
 * may be invoked directly. This is just a convenience method, as you can call
 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
 *
 * For convenience, you can also pass an action creator as the first argument,
 * and get a dispatch wrapped function in return.
 *
 * @param {Function|Object} actionCreators An object whose values are action
 * creator functions. One handy way to obtain it is to use ES6 `import * as`
 * syntax. You may also pass a single function.
 *
 * @param {Function} dispatch The `dispatch` function available on your Redux
 * store.
 *
 * @returns {Function|Object} The object mimicking the original object, but with
 * every action creator wrapped into the `dispatch` call. If you passed a
 * function as `actionCreators`, the return value will also be a single
 * function.
 */

/**
 * Turns an object whose values are different reducer functions, into a single
 * reducer function. It will call every child reducer, and gather their results
 * into a single state object, whose keys correspond to the keys of the passed
 * reducer functions.
 *
 * @param {Object} reducers An object whose values correspond to different
 * reducer functions that need to be combined into one. One handy way to obtain
 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
 * undefined for any action. Instead, they should return their initial state
 * if the state passed to them was undefined, and the current state for any
 * unrecognized action.
 *
 * @returns {Function} A reducer function that invokes every reducer inside the
 * passed object, and builds a state object with the same shape.
 */

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

/**
 * Watch a file and emit add event if warranted.
 * @param {Path} file Path
 * @param {fs.Stats} stats result of fs_stat
 * @param {Boolean} initialAdd was the file added at watch instantiation?
 * @returns {Function} closer for the watcher instance
 */

/**
 * Watch file for changes with fs_watchFile or fs_watch.
 * @param {String} path to file or dir
 * @param {Function} listener on fs change
 * @returns {Function} closer for the watcher instance
 */

/**
 * Watches files & directories for changes. Emitted events:
 * `add`, `addDir`, `change`, `unlink`, `unlinkDir`, `all`, `error`
 *
 *     new FSWatcher()
 *       .add(directories)
 *       .on('add', path => log('File', path, 'was added'))
 */

/**
 * Zip strings
 */

/**
 * drop-in replacement for _.get
 * @param obj
 * @param path
 * @param defaultValue
 */

/**
 * drop-in replacement for _.isString
 * @param input
 */

/**
 * drop-in replacement for _.without
 */

/**
 * repalcement for _.xor
 * @param itemsA
 * @param itemsB
 */

/**
 * replacement for _.intersection
 * @param itemsA
 * @param itemsB
 */

/**
 * useDropTarget Hook
 * @param spec The drop target specification
 */

/** @class */

/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v16.13.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @type Array<any> */

/** @type {Map<Path, Object>} */

/** @type {Map<Path, String|Boolean>} */

/** @type {Map<String, Array>} */

/** @type {Map<String, DirEntry>} */

/** @type {Map<ThrottleType, Map>} */

/** @type {Object} */

/** @type {Set<Path>} */

/** @type {Set<String>} */

/** @type {fs.FSWatcher=} */

/** @type {object|boolean} */

/************************************************************************/

/******/

/***/

/*return*/

/*yield*/

//

//         channel.port2.postMessage(0);

//         setImmediate(callback);

//     channel.port1.onmessage = callback;

//     return function requestCall() {

//     var channel = new MessageChannel();

//     };

//    is used by selectorFactory to decide if it should reinvoke on props changes.

//    new function as the true mapToProps for subsequent calls.

//    the developer that their mapToProps function is not returning a valid result.

//   * https://github.com/react-dnd/react-dnd/issues/869

//   * https://github.com/react-dnd/react-dnd/pull/928

//  * Detects whether the mapToProps function being called depends on props, which

//  * On first call, handles mapToProps if returns another function, and treats that

//  * On first call, verifies the first result is a plain object, in order to warn

// "Upgrade" the watcher to persistence or a quicker interval.

// "drop and blow away the whole document" action.

// (may be shared across chokidar FSWatcher instances)

// (other than symlinks being followed, which will be tracked soon)

// - Android 4-4.3

// - Chrome 26-34

// - Firefox 14-29

// - However, we may have gotten new wrapper props after that

// - Internet Explorer 11

// - Safari 6-7

// - This render may have been triggered by a Redux store update that produced new child props

// - iPad Safari 6-7.1

// - iPhone Safari 7-7.1

// ------------

// --------------

// -----------------

// <div ref={node => connectDragSource(connectDropTarget(node))}/>

// @ts-ignore

// A length of one signals that mapToProps does not depend on props from the parent component.

// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and

// A native item (such as URL) dragged from inside the document

// A native item (such as file or URL) dragged from outside the document

// ASAP was originally a nextTick shim included in Q. This was factored out

// Actually run the selector with the most recent store state and wrapper props

// Actually subscribe to the nearest connected ancestor (or store)

// Advance the index before calling the task. This ensures that we will

// Align at the center

// Allow injecting another batching function later

// Alphabet chars.

// An exception thrown by a task will permanently interrupt the processing of

// Any reducers that existed in both the new and old rootReducer

// Array-as-queue is good enough here, since we are just dealing with exceptions.

// Avoid conflicts if we later create another file with the same name

// Avoid crashing if we missed a drop event or our previous drag died

// Avoid failures from read-only properties

// Based on the previous check, one of these must be true

// But, if we have new wrapper props, those might change the child props, so we have to recalculate things.

// By explicitly using `prop-types` you are opting into new production behavior.

// CONCATENATED MODULE: ./components/rootBox.tsx

// CONCATENATED MODULE: ./fileSystem/init.js

// CONCATENATED MODULE: ./redux/reduce/index.ts

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/@babel/runtime/helpers/esm/extends.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/@react-dnd/asap/dist/esm/browser/asap.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/@react-dnd/asap/dist/esm/browser/index.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/@react-dnd/asap/dist/esm/browser/raw.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/@react-dnd/invariant/dist/invariant.esm.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/@react-dnd/shallowequal/dist/shallowequal.esm.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/dnd-core/dist/esm/DragDropManagerImpl.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/dnd-core/dist/esm/DragDropMonitorImpl.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/dnd-core/dist/esm/HandlerRegistryImpl.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/dnd-core/dist/esm/actions/dragDrop/beginDrag.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/dnd-core/dist/esm/actions/dragDrop/drop.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/dnd-core/dist/esm/actions/dragDrop/endDrag.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/dnd-core/dist/esm/actions/dragDrop/hover.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/dnd-core/dist/esm/actions/dragDrop/index.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/dnd-core/dist/esm/actions/dragDrop/local/setClientOffset.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/dnd-core/dist/esm/actions/dragDrop/publishDragSource.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/dnd-core/dist/esm/actions/dragDrop/types.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/dnd-core/dist/esm/actions/registry.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/dnd-core/dist/esm/contracts.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/dnd-core/dist/esm/factories.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/dnd-core/dist/esm/reducers/dirtyHandlerIds.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/dnd-core/dist/esm/reducers/dragOffset.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/dnd-core/dist/esm/reducers/dragOperation.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/dnd-core/dist/esm/reducers/index.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/dnd-core/dist/esm/reducers/refCount.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/dnd-core/dist/esm/reducers/stateId.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/dnd-core/dist/esm/utils/coords.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/dnd-core/dist/esm/utils/dirtiness.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/dnd-core/dist/esm/utils/getNextUniqueId.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/dnd-core/dist/esm/utils/js_utils.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/dnd-core/dist/esm/utils/matchesType.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-dnd-html5-backend/dist/esm/BrowserDetector.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-dnd-html5-backend/dist/esm/EnterLeaveCounter.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-dnd-html5-backend/dist/esm/HTML5BackendImpl.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-dnd-html5-backend/dist/esm/MonotonicInterpolant.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-dnd-html5-backend/dist/esm/NativeDragSources/NativeDragSource.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-dnd-html5-backend/dist/esm/NativeDragSources/getDataFromDataTransfer.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-dnd-html5-backend/dist/esm/NativeDragSources/index.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-dnd-html5-backend/dist/esm/NativeDragSources/nativeTypesConfig.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-dnd-html5-backend/dist/esm/NativeTypes.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-dnd-html5-backend/dist/esm/OffsetUtils.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-dnd-html5-backend/dist/esm/OptionsReader.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-dnd-html5-backend/dist/esm/index.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-dnd-html5-backend/dist/esm/utils/js_utils.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-dnd/dist/esm/common/DndContext.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-dnd/dist/esm/common/DndProvider.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-dnd/dist/esm/common/DropTargetMonitorImpl.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-dnd/dist/esm/common/TargetConnector.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-dnd/dist/esm/common/registration.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-dnd/dist/esm/common/wrapConnectorHooks.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-dnd/dist/esm/hooks/internal/drop.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-dnd/dist/esm/hooks/internal/useCollector.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-dnd/dist/esm/hooks/internal/useIsomorphicLayoutEffect.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-dnd/dist/esm/hooks/internal/useMonitorOutput.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-dnd/dist/esm/hooks/useDragDropManager.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-dnd/dist/esm/hooks/useDrop.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-dnd/dist/esm/utils/cloneWithRef.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-dnd/dist/esm/utils/isRef.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-redux/es/components/Provider.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-redux/es/connect/connect.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-redux/es/connect/mapDispatchToProps.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-redux/es/connect/mapStateToProps.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-redux/es/connect/mergeProps.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-redux/es/connect/selectorFactory.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-redux/es/connect/verifySubselectors.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-redux/es/connect/wrapMapToProps.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-redux/es/hooks/useReduxContext.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-redux/es/index.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-redux/es/utils/batch.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-redux/es/utils/reactBatchedUpdates.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-redux/es/utils/shallowEqual.js

// CONCATENATED MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/redux/es/redux.js

// Capture values for checking if and when this component unmounts

// Check `path` instead of `absPath` because the cwd portion can't be a glob

// Check if item was on the watched list and remove it

// Check if module is in cache

// Check that change event was not fired because of changed only accessTime.

// Check the node either in the main document or in the current context

// Check the target ids at the innermost position. If they are valid, add them

// Check to protect against issue gh-730.

// Common helpers

// Create a new module (and put it into the cache)

// Custom components can no longer be wrapped directly in React DnD 2.0

// Cut out early if the target id has not been set. This should prevent errors

// DCE check should happen before ReactDOM bundle executes so that

// Decide whether or not we should start a new higher-level

// Default to a dummy "batch" implementation that just runs the callback

// Detect buggy property enumeration order in older V8 versions.

// DevTools can report bad minification during injection.

// Digits

// Directory helpers

// Distinguish between actual "data" props that were passed to the wrapper component,

// Dock to the bottom

// Dock to the left

// Dock to the right

// Dock to the top

// Don't emit hover in `dragenter` on Firefox due to an edge case.

// Don't publish the source just yet (see why below)

// Don't show a nice cursor but still prevent default

// ESM COMPAT FLAG

// EXTERNAL MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js

// EXTERNAL MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react/index.js

// EXTERNAL MODULE: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/symbol-observable/es/index.js

// Editor atomic write normalization enabled by default with fs.watch

// Enable fsevents on OS X when polling isn't explicitly enabled.

// Equivalent to push, but avoids a function call.

// Even if we were, there is another bug in Internet Explorer 10.

// Execute the module function

// Export FSWatcher class

// FSEVENT_CLONED,

// File helpers

// Files that absent in current directory snapshot

// Files that present in current directory snapshot

// Finally call hover on all matching targets.

// Firefox can dispatch this event in an infinite loop

// Firefox only cares if it's an image, but WebKit also wants it to be detached.

// Firefox won't drag without setting data

// Fix issues where mtime is null but file is still present

// Flag the module as loaded

// For other targets, ask IE

// For reasons explained above, we are also unable to use `setImmediate`

// Get consecutive differences and slopes

// Get degree-1 coefficients

// Get degree-2 and degree-3 coefficients

// Get the draggable source

// Get the source client offset

// Global override (useful for end-developers that need to force polling for all

// However, `flush` does not make any arrangements to be called again if an

// However, if we ever elect to use timers in Safari, the prevalent work-around

// However, since this timer gets frequently dropped in Firefox

// IE doesn't support MIME types in setData

// IE requires this to fire dragover events

// If React sees the exact same element reference as last time, it bails out of re-rendering

// If a task throws an exception, `flush` ensures that its state will remain

// If by this time no drag source reacted, tell browser not to drag.

// If child drag source refuses drag but parent agrees,

// If passed a ReactElement, clone it and attach this function as a ref.

// If pure is true, the selector returned by selectorFactory will memoize its results,

// If the child props _did_ change (or we caught an error), this wrapper component needs to re-render

// If the child props haven't changed, nothing to do here - cascade the subscription update

// If the render was from a store update, clear out that reference and cascade the subscriber update

// If the target changes position as the result of `dragenter`, Firefox

// If we aren't running in "pure" mode, we don't want to memoize values.

// If we call `asap` within tasks scheduled by `asap`, the queue will

// If we have new child props, and the same wrapper props, we know we should use the new child props as-is.

// If we wait for this file to be fully written, cancel the wait.

// If we're in "pure" mode, ensure our wrapper component only re-renders when incoming props have changed.

// If we're not subscribed to the store, nothing to do here

// If we've accumulated a substantial number of paths that

// Important!

// In a web browser, exceptions are not fatal. However, to avoid

// In some cases the user may want to override this behavior, e.g.

// In that case, throw the error from here so it doesn't get lost.

// Initialize the coordinates using the client offset

// Initialize the full coordinates

// Initialize with proper watcher.

// Inputs and textareas should be selectable

// Instead, we periodically shift 1024 tasks off the queue.

// Interpolate

// It also neatly avoids a situation where render() returns null

// It is not sufficient to assign `setImmediate` to `requestFlush` because

// It's possible that we caught an error due to a bad mapState function, but the

// Its name will be periodically randomized to break any code that

// Its name will be periodically randomized to break any code that depends on

// Just let it drag. It's a native type (URL or text) and will be picked up in

// Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.

// Launch stream with one parent, the root dir.

// Load entry module and return exports

// Looks like a Safari bug: dataTransfer.types is null, but there was no draggable.

// Manually shift all values starting at the index back to the

// Mark imbalanced braces and brackets as invalid

// Memoize the check that determines which context instance we should use.

// Memory management.

// Multiple actions are dispatched here, which is why this doesn't return an action

// Must use `global` or `self` instead of `window` to work in both frames and web

// MutationObservers are desirable because they have high priority and work

// MutationObservers, so we don't need to fall back in that case.

// NAMESPACE OBJECT: /Users/kawanoshuji/Library/Application Support/Adobe/CEP/extensions/watchPlacedItem/node_modules/react-dnd-html5-backend/dist/esm/NativeTypes.js

// Never forget.

// Non-alphabetic chars.

// Normalize the directory name on Windows

// Not indenting methods for history sake; for now.

// Note that we do this because on renders _not_ caused by store updates, we need the latest store state

// Now that all that's done, we can finally try to actually render the child component.

// Object.prototype.hasOwnProperty.call

// Once a flush has been requested, no further calls to `requestFlush` are

// Only IE requires us to explicitly say

// Only proceed if we have not handled it already.

// Other platforms use non-polling fs_watch.

// Otherwise, put this component's subscription instance into context, so that

// Our re-subscribe logic only runs when the store/subscription setup changes

// Prevent default "drop and blow away the whole document" action.

// Prevent leaking memory for long chains of recursive calls to `asap`.

// Propagate any mapState/mapDispatch errors upwards

// Public methods

// Pull data from the store after first render in case the store has

// RawTasks are recycled to reduce GC churn.

// Re-create this selector whenever the store changes.

// React v16.11 and below

// React v16.12 and above

// Rearrange xs and ys so that xs is sorted

// Receiving a mouse event in the middle of a dragging operation

// Recursively remove children directories / files.

// Remove those targetIds that don't match the targetType.  This

// Removes this instance's listeners and closes the underlying fs_watchFile

// Replace globs with equivalent patterns to reduce parsing time.

// Return the exports of the module

// SSR Fix (https://github.com/react-dnd/react-dnd/pull/813

// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that

// Safari 6.0 has a problem where timers will get lost while the user is

// Safari 6.0.5 (at least) intermittently fails to create message ports on a

// Save references to the new child props.  Note that we track the "child props from store update"

// Search for the interval x is in, returning the corresponding y if x is one of the original xs

// See:

// Set up default options.

// Set up refs to coordinate values between the subscription effect and the render logic

// Show user-specified drop effect.

// So, we'll use the child props from store update only if the wrapper props are the same as last time.

// Store drag source node so we can check whether

// Suppress event when fs_stat fails, to avoid sending undefined 'stat'

// TODO

// TODO We're reading the store directly in render() here. Bad idea?

// TODO: Add more comments

// TODO: Strange thing: "should not choke on an ignored watch path" will be failed without 2 ready calls -__-

// TODO: if we ever make a react-native version of this,

// TODO: real check

// Test for A's keys different from B.

// The Entry will either be a directory that just got removed

// The browsers will use the image intrinsic size under different conditions.

// The child props selector needs the store reference as an input.

// The drop target may either be attached via ref or connect function

// The flush function processes all tasks that have been scheduled with

// The message channel technique was discovered by Malte Ubl and was the

// The module cache

// The require function

// The rightmost point in the dataset should give an exact result

// They are implemented in all modern browsers.

// This Subscription's source should match where store came from: props vs. context. A component

// This action has a similiar effect to ActionTypes.INIT.

// This creates some unlikely edge case issues if the user mixes

// This helps us achieve a neat API where user doesn't even know that refs

// This hook exists purely for testing purposes.

// This is for `asap.js` only.

// This is needed because the drag preview needs to be drawn or else it fires an 'mousemove' event

// This is probably a native item type we don't understand.

// This is the reason such behavior is strictly opt-in.

// This is used to make sure we don't warn about the same

// This is useful to prevent an error thrown in a task from stalling the event

// This shouldn't happen as long as we do top-down subscriptions correctly, but

// This will create a new entry in the watched object in either case

// This will likely cause Bad Things (TM) to happen in Concurrent Mode.

// To avoid conditionally calling hooks, we fall back to a tiny wrapper

// To maintain the wrapperProps object reference, memoize this destructuring.

// Tricky logic here:

// Use bigint stats if it's windows and stat() supports options (node 10+).

// Use custom drag image if user specifies it.

// Use polling on Mac if not using fsevents.

// Use the fastest means possible to execute a task in its own turn, with

// Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,

// Users may optionally pass in a custom context instance to use instead of our ReactReduxContext.

// Usually we want to publish it in the next tick so that browser

// Verify that the code above has been dead code eliminated (DCE'd).

// We dispatch a timeout with a specified delay of 0 for engines that

// We don't expect any of the above to throw, but better to be safe.

// We memoize the elements for the rendered child component as an optimization.

// We need this to execute synchronously every time we re-render. However, React warns

// We need to wait before we start listening for mousemove events.

// We queue errors to ensure they are thrown in right order (FIFO).

// We want to capture the wrapper props and child props we used for later comparisons

// We wrap tasks with recyclable task objects.  A task object implements

// We'll have to wait for @3x to see if this is entirely correct

// When a store is created, an "INIT" action is dispatched so that every

// When passed a node, call the hook straight away.

// When using a custom drag layer, the only way to prevent

// Whichever timer succeeds will cancel both timers and

// Work around @2x coordinate discrepancies in browsers

// Work around Safari 8 positioning bug

// Workaround for https://github.com/joyent/node/issues/4337

// You’re frozen when your heart’s not open.

// __webpack_public_path__

// `call`, just like a function.

// `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in

// `process.on("uncaughtException")` or by a domain.

// `rawAsap` unless and until one of those tasks throws an exception.

// `requestFlush` is implemented using a strategy based on data collected from

// `requestFlush` requests that the high priority event queue be flushed as

// `setImmediate` must be called *by name* and therefore must be wrapped in a

// `setTimeout` does not call the passed callback if the delay is less than

// a path may have been filtered out of this readdir, but

// about useLayoutEffect in SSR, so we try to detect environment and fall back to

// above the current one, create a watcher on the parent

// add is about to be emitted if file not already tracked in parent

// add the linkTarget for watching with a wrapper for transform

// allow detectFactoryAndVerify to get ownProps

// allowing connectAdvanced's shouldComponentUpdate to return false if final

// amendments. These decisions, particularly to marginalize MessageChannel and

// an event 20 times per second until it succeeds.

// and are removed from @watched[directory].

// and height. In this case, though, returning null from render()

// and the components are attached to dnd-core

// and the statsProp is undefined

// and values needed to control behavior (forwarded refs, alternate context instances).

// approximately 7 in web workers in Firefox 8 through 18, and sometimes not

// are being used under the hood.

// as a ref instead of a useState/useReducer because we need a way to determine if that value has

// assume we should escape the brackets to match literal characters

// assume we should match with a regex character class

// back into ASAP proper.

// backwards-compatibility

// been processed.  If this went into useState/useReducer, we couldn't clear out the value without

// begin flushing on the next task the task throws an error.

// beginning of the queue.

// between events.

// but absent in previous are added to watch list and

// but present in previous emit `remove` event

// call `rawAsap.requestFlush` if an exception is thrown.

// can reliably accommodate that request. This will usually be snapped

// case the file's watcher misses it (and rely on throttling to de-dupe)

// changed since we began.

// cheap lodash replacements

// check if there is already a watcher on a parent path

// checking for BOS characters like "!" and "." (not "./")

// closure.

// collapse slashes to reduce potential for exploits

// connected descendants won't update until after this component is done

// connected to the store via props shouldn't use subscription from context, or vice versa.

// consistent and will resume where it left off when called again.

// const index = cont.listeners.indexOf(listener);

// convert to absolute path unless relative path already matches

// correct for wrong events emitted

// could have been consolidated by watching one directory

// create a fake namespace object

// create constants based on platform, for windows or posix

// createConnect with default args builds the 'official' connect behavior. Calling it with

// define __esModule on exports

// define getter function for harmony exports

// depends on its existence.

// dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args

// determines subdirectory traversal levels from root to path

// different options opens up some testing and extensibility scenarios

// documented since Node 10.4.1

// doesn't seem worthwhile for the added complexity.

// don't follow the same symlink more than once

// don't hoist over string (html) components

// don't recurse further if it would exceed depth setting

// dragenter handler.

// either ensure that no exceptions are thrown from your task, or to manually

// emit `add` event.

// emit addDir unless this is a glob parent

// emit an add event if we're supposed to

// emit based on events occurring for files from a directory's watcher in

// empty

// ensure dir is tracked (harmless if redundant)

// ensure directories are tracked

// ensure empty dirs get tracked

// ensure relativeness of path is preserved in case of watcher reuse

// ensure that win32 namespaces has two leading slashes, so that the path is

// entry may be undefined, because a warning or an error were emitted

// eslint-disable-line no-new-wrappers

// eslint-disable-next-line no-prototype-builtins

// evaluate what is at the path we're being asked to watch

// even then.

// events in browsers.

// every available SauceLabs Selenium web driver worker at time of writing.

// exception is thrown by a task, that the task queue will continue flushing as

// exception is thrown.

// execute the callback.

// expose the module cache

// expose the modules object (__webpack_modules__)

// extracted by mini-css-extract-plugin

// filter out duplicates if specified

// filter out empty strings if specified

// first entry should always have entry.parentDir === EMPTY_STR

// fix negative zero

// fixes shallow isOver which would only be non-shallow because of

// flip windows path separators

// for frozen objects

// for recursive deleting and cleaning of watched object

// forcing another re-render, which we don't want.

// fs_watch helpers

// function makeRequestCallFromMessageChannel(callback) {

// function makeRequestCallFromSetImmediate(callback) {

// get the location of the block on parent.nodes (block's siblings)

// getDefaultExport function for compatibility with non-harmony modules

// grow, but to avoid an O(n) walk for every task we execute, we don't

// handled properly by the win32 version of path.parse() after being normalized

// have WebKitMutationObserver but not un-prefixed MutationObserver.

// http://fb.me/prop-types-in-prod

// http://www.nonblocking.io/2011/06/windownexttick.html

// https://bugs.chromium.org/p/v8/issues/detail?id=3056

// https://bugs.chromium.org/p/v8/issues/detail?id=4118

// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593

// https://github.com/react-dnd/react-dnd/issues/1310

// https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js

// https://msdn.microsoft.com/library/windows/desktop/aa365247(v=vs.85).aspx#namespaces

// if (cont.watcherUnusable) {

// if a path is being added that was previously ignored, stop ignoring it

// if an open bracket/brace/paren is escaped,

// if current directory is removed, do nothing

// if dragend handler does something like showing an alert.

// if it is not a directory, nestedDirectoryChildren will be empty array

// if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes

// if nothing has changed then don't resubscribe

// if stats doesn't exist the file must have been deleted

// if the beginning of the glob is "./", advance the start

// if the file is already being watched, do nothing

// if the only watched file is removed, watch for its return

// if we ever do those wrong, this throw will surface the error in our tests.

// if what is being deleted is a directory, get that directory's paths

// immediately in some browsers.

// in case of intersecting globs;

// in the same tick for the source element, and browser freaks out.

// instance if there are no more listeners left

// instance if there are no more listeners left.

// instances of chokidar, regardless of usage/dependency depth)

// into this ASAP package. It was later adapted to RSVP which made further

// is able to screenshot the current (not yet dragging) state.

// is to add a scroll event listener that calls for a flush.

// it is removed from DOM and trigger endDrag manually.

// its existence.

// just useEffect instead to avoid the warning, since neither will run anyway.

// keys multiple times.

// kick off the watcher

// listeners.add(listener);

// lower priority turn.

// means it has ended and the drag source node disappeared from DOM,

// memoized from props

// minimatch options support

// mode & 1: value is a module id, require it

// mode & 2: merge all properties of value into the ns

// mode & 4: return value when already ns object

// mode & 8|1: behave like require

// modifies `watchPath` to the parent path when it finds a match

// module.parent = undefined by default

// mutation observers, so that implementation is used instead.

// necessary until the next `flush` completes.

// need to check filterPath on dirs b/c filterDir is less restrictive

// no need to use broadcast here

// non-matching targets.

// object and shouldComponentUpdate will always return true.

// object to hold per-process fs_watch instances

// one more time for any missed in case changes came in extremely quickly

// only need to resolve once

// only push if _both_ are negative...

// optionally relax regex

// options object:

// or _both_ are positive

// or a bogus entry to a file, in either case we have to remove it

// original foundation for this library.

// page's first load. Thankfully, this version of Safari supports

// parent re-rendered without this component and we're about to unmount.

// parent watcher

// passed through to selectorFactory

// path instead, so that we do consolidate going forward.

// preserve the current depth here since it can't be derived from

// preserve this symlink's target path

// preserves full path in case of trailing path separator

// prevent duplicate handling in case of arriving here nearly simultaneously

// priority over other events including IO, animation, reflow, and redraw

// probably be avoided if Subscription's listeners logic is changed to not call listeners

// props have not changed. If false, the selector will always return a new

// public for test

// push symlinks back to the top of the stack to get handled

// queue if the exception handled by Node.js’s

// rawAsap provides everything we need except exception management.

// rawEmitters.add(rawEmitter);

// real paths past the symlink

// realpath has already been resolved

// rebuild the output if we had to backtrack at any point

// reducer returns their initial state. This effectively populates

// ref objects should be passed straight through without wrapping

// regular expressions

// reliably everywhere they are implemented.

// remove escape chars and return result

// remove path parts that are globby

// remove single star from output

// removes this instance's listeners and closes the underlying fs_watch

// removes this instance's listeners and closes the underlying fsevents

// replace the (invalid) block with it's nodes

// reset "prev" to the first token

// reset output with globstar

// reset previous token to globstar

// reset the cached userIgnored anymatch fn

// return the node so it can be chained (e.g. when within callback refs

// returns boolean indicating whether fsevents can be used

// scan the contents of the dir

// scrolling. This problem does not impact ASAP because Safari 6.0 supports

// set aside negated glob strings

// set the index to the next closing character

// settings in a very weird way, but solving for those cases

// shift tasks off the queue after they have been executed.

// shouldn't be removed because it matches a different glob

// slowing down the queue of pending tasks, we rethrow the error in a

// so that we don't need to depend on findDOMNode() from react-dom.

// so the browser didn't dispatch the dragend event.

// so we got to do the directory check beforehand

// soon as possible, but if you use `rawAsap` directly, you are responsible to

// soon as possible.

// special case for strings ending in enclosure containing path separator

// stats is always present

// stats.mode may be bigint

// strip consecutive `/**/`

// subsequent tasks. The higher level `asap` function ensures that if an

// suppress the useLayoutEffect warning on server side.

// suppress unlink events on never before seen files

// that causes emitted paths to incorporate the link's path

// that child, same as if it was wrapped in React.memo() or returned false from shouldComponentUpdate.

// that have been unsubscribed in the  middle of the notification loop.

// that just executes the given callback immediately.

// the default drag preview from drawing in IE is to screenshot

// the dragging state in which the node itself has zero opacity

// the initial state tree.

// the middle of the notification loop, where `subscription` will then be null. This can

// the new state tree with any relevant data from the old one.

// there. The easy solution is to only fire `hover` in `dragover` on FF.

// therefore not reporting its length accurately..

// this function wraps mapToProps in a proxy function which does several things:

// to a 4 milisecond delay, but once we're flushing, there's no delay

// to capture the MutationObserver implementation in a closure, were integrated

// to determine what the child props should be

// to determine what the child props should be.

// to enable drag and drop

// to make ignoredPaths changes effective

// to the current index, and don't add the "./" characters

// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine

// to the result

// to the state. This greatly simplifies lookbehinds when

// to work around IE not supporting custom drag previews.

// track new directories

// track new paths

// undefined on initial render

// under any circumstances.

// update the collected properties after the first render

// use parent's node as drag image. Neither works in IE though.

// use process.nextTick to allow time for listener to be bound

// used in error messages

// used to compute Connect's displayName from the wrapped component's displayName.

// via multiple paths (such as _handleFile and _handleDir)

// watch symlink directly (don't follow) and detect changes

// we don't care about invariant's own frame

// we want drag drop operation to start

// we'll need to consider how to pull off dev-tooling

// webpackBootstrap

// when literal brackets are explicitly disabled

// when literal brackets are explicitly enabled

// when the user specifies nothing, try to match both

// where the user has an older version of dnd-core like in

// whether mapToProps needs to be invoked when props have changed.

// will abruptly end the dragging, which is not obvious.

// will receive the previous state. This effectively populates

// will still happily dispatch `dragover` despite target being no longer

// workers, we enlist an interval handle that will try to fire

// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.

// }

//# sourceMappingURL=invariant.esm.js.map

//# sourceMappingURL=shallowequal.esm.js.map

//const appID = csInterface.getApplicationID();

//json2読み込み

//reload();//デバッグ用イベント 
